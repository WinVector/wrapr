% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string_interpolation.R
\name{sinterp}
\alias{sinterp}
\title{Dot substitution.}
\usage{
sinterp(str, ..., envir = parent.frame(), enclos = parent.frame(),
  match_pattern = "\\\\.\\\\([^()]+\\\\)",
  removal_patterns = c("^\\\\.\\\\(", "\\\\)$"))
}
\arguments{
\item{str}{charater strings to be substituted into}

\item{...}{force later arguments to bind by name}

\item{envir}{environemnt to look for values}

\item{enclos}{enclosing evaluation environment}

\item{match_pattern}{regexp to find substitution targets.}

\item{removal_patterns}{regexps to remove markers from substitution targets.}
}
\value{
modified strings
}
\description{
String interpolation using \code{bquote}-stype .() notation.  See also
\code{glue::glue()}.  Pure R, no C/C++ code called.
}
\examples{

x <- 7
sinterp(c("x is .(x), x+1 is .(x+1)", ".(x) is odd is .(x\%\%2 == 1)"))

# Because matching is done by a regular expression we
# can not use parenthesis inside the interpolation region.
# One can work around that by pre-arranging values to be
# in variables or by using {} for expressions and
# pipe for single argument function evaluation.
# This is obviously awkward, but does work
# (assuming the wrapr package is attached):
sinterp("sin(x*(x+1)) is .({x*{x+1}} \%.>\% sin)")

}

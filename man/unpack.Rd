% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unpack.R
\name{unpack}
\alias{unpack}
\title{Unpack or bind values into the calling environment.}
\usage{
unpack(value, ...)
}
\arguments{
\item{value}{list of values to copy}

\item{...}{argument names to write to}
}
\description{
Unpacks or binds values into the calling environment. Uses \code{bquote} escaping.
NULL is a special case that is unpacked to all targets. NA targets are skipped.
All non-NA target names must be unique.
}
\details{
Similar to \code{Python} tuple unpacking, \code{zeallot}'s arrow, and to \code{vadr::bind}.

Note: a reference to the unpacker object is written into the unpacking environment as a side-effect
of the implied array assignment.  Also, can not unpack into a variable name same as the un-packer's
original declared name (unpack).
}
\examples{

# name capture version
unpack[a, b] <- list(5, 10)
print(a)  # now 5
print(b)  # now 10

# bquote re-direct to value in variable using .()
# Note: the bquote .() step is potentially confusing, as the user
# can't immediately see where the value is being assigned to.
# Also, quotes are allowed.
a <- 'x'
unpack[.(a), 'b'] <- list(20, 40)
print(x)  # now 20
print(b)  # now 40
print(a)  # still 'x'

# pipe version
list(55, 15) \%.>\% unpack(., a, b)
print(a)  # now 55
print(b)  # now 15

}
